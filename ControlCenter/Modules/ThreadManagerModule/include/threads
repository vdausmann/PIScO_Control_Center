#pragma once

#include <atomic>
#include <condition_variable>
#include <cstdint>
#include <functional>
#include <iostream>
#include <mutex>
#include <queue>
#include <thread>
#include <vector>

// Error/Information handling:
typedef int16_t Info;
// Success is encoded as 0
// Warnings have positive values below 128.
// Infos have positive values above 128.
// Errors have negative values.
// This conventions can easialy
constexpr Info Success = 0;

// Infos
constexpr Info nextInfo = 128;

// Warnings
constexpr Info EmptyTask = 1;
constexpr Info NoFinishedTasksAvailable = 2;
constexpr Info nextWarning = 3;

// Errors
constexpr Info Unknown = -1;
constexpr Info TaskFunctionNotSet = -2;
constexpr Info Runtime = -3;
constexpr Info nextError = -4;

std::string info(Info infoCode);
extern std::function<std::string(Info)> errorFunction;

/* Task struct holds a function that will be called when the task is run. The first argument of the task
 * function has to be a pointer to a task. This allows different behavior of the task function depending on
 * the task data. All other arguments needed for the task function are passed in the initTaskFunction method
 * and will be used to call the task function. Passing by reference is not possible. Instead pointers can
 * be used. The task function will return an optional errorMessage which is stored in the tasks errorMessage
 * variable. The tasks errorMessage can for example be handled in the addNextTask function from the
 * ThreadManager. Tasks also can be empty. This case should be handled in the task function. The last task
 * that will be send to the thread manager should have a stop signal. Here, an empty task can be used. The
 * id provided upon creation of a task can be usefull when receiving the finished task.
 */
struct Task {
private:
    std::function<Info(Task*, std::mutex&, size_t threadID)> _taskFunction;
    int _taskId;

public:
    Info infoCode;
    bool softStopThreadManager;
    bool hardStopThreadManager;
    bool emptyTask;

    int getTaskId() const { return _taskId; }

    // Error runTask();
    Info runTask(std::mutex& taskMutex, size_t threadID);

    void makeEmpty()
    {
        emptyTask = true;
        infoCode = EmptyTask;
    }

    Task(int id)
        : _taskId(id)
        , infoCode(Success)
        , softStopThreadManager(false)
        , hardStopThreadManager(false)
        , emptyTask(false)
    {
    }

    Task()
        : _taskId(-1)
        , infoCode(Success)
        , softStopThreadManager(false)
        , hardStopThreadManager(false)
        , emptyTask(false)
    {
    }

    // Looks complicated, but just allows the constructor to be called with a function and as many arguments
    // as needed for this function. The function can than be called on runTask(). Carefull: passing by
    // reference is not possible!
    // thanks ChatGPT
    template <typename Callable, typename... Args>
    void initTaskFunction(Callable&& func, Args... args)
    {
        // Store a lambda that captures the function and its arguments
        _taskFunction = [func = std::forward<Callable>(func), ... capturedArgs = std::forward<Args>(args), this](Task* task, std::mutex& taskMutex, size_t threadID) mutable -> Info {
            try {
                return func(task, taskMutex, threadID, capturedArgs...);
            } catch (const std::exception& e) {
                std::cout << std::string("Exception: ") + e.what() << std::endl;
                return Runtime;
            } catch (...) {

                return Runtime;
            }
        };
    }
};

Task emptyTask();
Task stopTask();

void checkInfo(const Task& finishedTask, bool printWarnings = true, bool printInfo = true);
void checkInfo(const Info& errorCode, bool printWarnings = true, bool printInfo = true);

/* ThreadManager class. The class starts _numThreads threads and provides the threads with Tasks to be run.
 * The preloaded tasks (up to _maxQueueSize tasks) are stored in the _availableTasksQueue. The finished tasks
 * are stored in the _finishedTasksQueue. New tasks can only be added when there is at least one finished task.
 * The new tasks are added via the addNextTask method, which will return the finished task that is replaced.
 * The ThreadManager runs automatically after creation and waits for tasks to be added. An external source
 * calls the addNextTask function and provides the new task from there. The function blocks the external
 * source until the new task is added to _availableTasksQueue. After that, a worker thread will be started
 * with the new task.
 */
struct ThreadManager {
private:
    std::queue<Task> _availableTasksQueue, _finishedTasksQueue;
    std::mutex _taskMutex, _mainMutex;
    std::condition_variable _taskCondition, _mainCondition;
    std::function<Task(Task&)> _getNewTaskFunction;
    std::vector<std::thread> _threads;
    size_t _maxQueueSize;
    size_t _numThreads;
    std::atomic<bool> _softStop, _hardStop;
    bool joined;
    bool printInfo;

    void worker(size_t id);

public:
    ThreadManager(size_t maxQueueSize, size_t numThreads, bool printInfo = false);
    Task addNextTask(Task& newTask);
    void addNextTaskNotBlocking(Task& newTask);
    void cleanUp();
    void start();
    void finishThreads();
    Info getFinishedTask(Task& task);
    Info getFinishedTaskBlocking(Task& task);
    ~ThreadManager();
};
