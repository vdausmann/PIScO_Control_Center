# Configuration file for the modules used by the app
# A module is defined by the name in square brackets, i.e. [ModuleName]. 
# All settings below a module name correspond to this module. 
# Settings need to have a unique name (unique only per module) and a type and start with a
# "+" to indicate that they have to be added to the run command.
# The syntax is as follows:
#       +name: type (=value), where the () indicate 
# an optional default value for this setting.
# Possible values are:
#   string, bool, int, double, option, file, folder
# Options need to specify all possible options with the following syntax:
#       name: option{option1, option2, ...} (=value)
# The options type is always assumed to be a string.
#
# Internal settings: Settings that are only used internally and not passed to the module
# when running it. External commands start with a "-" followed by the the name, i.e.
#       -name = value
# A type is not needed.
# Each module needs to have a command which defines what to do when the module is startet.
# Optionally the priority value can be set to any double value. Within a task, modules are
# sorted by their priority and started in this order. The priority can also be set within
# the app, as all values given in this file the priority value is just a default value. If
# no priority is given, the priority defaults to 1.

[TestModule1]
+enableLogging {
    type = bool 
    value = true
    desc = Wether to enable logging.
}
+userName { type = string }
+savePath {
    type = folder 
    value = ~/Downloads
    desc = Folder to which the results should be saved.
    check = false
}
+configFile{
    type = file
    value = settings.cfg
}
+autoSave{
    type = bool
    value = false
}
+step{
    type = double
    value = 0.1
}

+model: option{model1, model2} = model2

+nCores: int

-command = echo "hi"

-priority = 0

[TestModule2]
+enableLogging: bool = false
+userName: string = Test
+autoSave: bool = false
+step: double = 0.1
-command = echo "bye"
-priority = 1
